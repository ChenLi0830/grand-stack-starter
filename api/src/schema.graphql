# Neo4J stored edge type - Transaction
type AddressTransaction @relation(name: "Transaction") {
  _id: String
  from: Address
  to: Address
  number_of_transactions: Int
}

# Neo4J stored edge type - Transaction
type UserTransaction @relation(name: "Transaction") {
  _id: String
  from: User
  to: User
  number_of_transactions: Int
}

# Neo4J stored data type - Address
type Address {
  address: String!
  amount_received: Float
  description: String # example for fields retrieved on the fly (not saved in DB)
  transactions: [AddressTransaction]
}

# Neo4J stored data type - User
type User {
  cluster_id: Int!
  amount_received: Float
  transactions: [UserTransaction]
  fullName: String
}

# Transaction type used in custom query - getAddressesByTransactionId
type AddressByTransaction {
  transactionId: String
  numberOfTransactions: Int
  fromNodeAddress: String
  fromNodeAmountReceived: Float
  toNodeAddress: String
  toNodeAmountReceived: Float
}

# Transaction type used in custom query - getUsersByTransactionId
type UserByTransaction {
  transactionId: String
  numberOfTransactions: Int
  fromNodeClusterId: String
  fromNodeAmountReceived: Float
  toNodeClusterId: String
  toNodeAmountReceived: Float
}

# Customized type example that represents the users registered this app
type AppUser {
  id: String!
  username: String
  lastVisitedAt: String
  searchHistory: [String]
  # ...other userSettings
}

# Customized mutation examples
type Mutation {
  # synchronous example - calculate the square of the input number
  Square(number: Float): Float
  # async example - save user search history
  AppendSearchHistory(userId: String!, searchTerm: String): AppUser
}

# Customized query examples
type Query {
  getAddressesByTransactionId(transactionId: Int!): AddressByTransaction
    @cypher(
      statement: """
      MATCH (a1:Address) - [t:Transaction] -> (a2:Address)
      WHERE id(t) = $transactionId
      RETURN {
        transactionId: id(t),
        numberOfTransactions: t.number_of_transactions,
        fromNodeAddress: a1.address,
        fromNodeAmountReceived: a1.amount_received,
        toNodeAddress: a2.address,
        toNodeAmountReceived: a2.amount_received
      }
      """
    )

  getUsersByTransactionId(transactionId: Int!): UserByTransaction
    @cypher(
      statement: """
      MATCH (u1:User) - [t:Transaction] -> (u2:User)
      WHERE id(t) = $transactionId
      RETURN {
        transactionId: id(t),
        numberOfTransactions: t.number_of_transactions,
        fromNodeClusterId: u1.cluster_id,
        fromNodeAmountReceived: u1.amount_received,
        toNodeClusterId: u2.cluster_id,
        toNodeAmountReceived: u2.amount_received
      }
      """
    )
}
